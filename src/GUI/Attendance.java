/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import static DB.Db.iud;
import static DB.Db.search;
import static Logger.Log.warning;
import java.awt.Color;
import java.awt.Font;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.plaf.basic.BasicInternalFrameTitlePane;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableModel;

/**
 *
 * @author abhi
 */
public class Attendance extends javax.swing.JInternalFrame {

    /**
     * Creates new form DashBoard
     */
    String theme;
    String userId;
    String user;
    
    public Attendance(String theme, String userId, String user) {
        initComponents();
        this.theme = theme;
        this.userId = userId;
        this.user = user;

        BasicInternalFrameTitlePane titlePane = (BasicInternalFrameTitlePane) ((BasicInternalFrameUI) this.getUI()).getNorthPane();
        this.remove(titlePane);
        this.setLocation(0, -25);

        tableDesign();
        themeLoad(theme);

        SimpleDateFormat sdf = new SimpleDateFormat("EEEE");
        tableLoad(sdf.format(new Date()));
//        System.out.println(sdf.format(new Date()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();

        setBorder(null);
        setPreferredSize(new java.awt.Dimension(1010, 570));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jTable1.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CLASS ID", "SUBJECT", "GRADE", "DESCRIPTION", "TEACHER", "TIME", "NO OF STUDENTS", "PRSENTED"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setOpaque(false);
        jTable1.setShowVerticalLines(false);
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(10);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(20);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(20);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(150);
            jTable1.getColumnModel().getColumn(4).setPreferredWidth(20);
            jTable1.getColumnModel().getColumn(5).setPreferredWidth(10);
            jTable1.getColumnModel().getColumn(6).setPreferredWidth(10);
            jTable1.getColumnModel().getColumn(7).setPreferredWidth(10);
        }

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/images/basic/add_32px.png"))); // NOI18N
        jLabel2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/images/basic/print_32px.png"))); // NOI18N
        jLabel5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("Search Class");

        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel18.setText("0");

        jLabel12.setText("records found  ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 541, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addGap(31, 31, 31))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel12)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1002, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextField1))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 511, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(jLabel12)))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(52, 52, 52)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 494, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(23, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setBounds(0, 0, 1010, 595);
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked

        int row = jTable1.getSelectedRow();

        if (row != -1) {
            
            if(jTable1.getValueAt(row, 0).toString().split("-")[0].equals("SE")){
            
                new SeminarAttendance(this, jTable1.getValueAt(row, 0).toString(), theme, userId, user).setVisible(true);
            
            }else{
            
                new AddAttendace(this, jTable1.getValueAt(row, 0).toString(), theme).setVisible(true);
            
            }
            
        } else {
            JOptionPane.showMessageDialog(this, "Please Select class", "Warning", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_jLabel2MouseClicked

    void tableDesign() {
        JTableHeader th = jTable1.getTableHeader();
        Font font = new Font("Century Gothic", Font.PLAIN, 12);
        th.setFont(font);
        th.setOpaque(false);
        Color cb = new Color(45, 52, 54);
        Color cf = new Color(241, 242, 246);
        th.setForeground(cf);
        th.setBackground(cb);

    }

    void tableLoad(String day) {
        int i = 1;

        TableModel model = jTable1.getModel();
        DefaultTableModel dtm = (DefaultTableModel) model;
        dtm.setRowCount(0);

//        load today classes
        try {
            ResultSet rs = search("SELECT * FROM class INNER JOIN teacher INNER JOIN subject INNER JOIN grade INNER JOIN day WHERE class.subject_id = subject.id && class.teacher_id = teacher.id && class.day_id = day.id && subject.grade_id = grade.id && class.`status` = '1' && day.day = '" + day + "';");

            while (rs.next()) {
                Vector<String> v = new Vector<>();

                v.add(rs.getString("class.id"));
                v.add(rs.getString("subject"));
                v.add(rs.getString("grade"));
                v.add(rs.getString("desc"));
                v.add(rs.getString("name"));
//                v.add(rs.getString("day"));
                v.add(rs.getString("start_time") + "-" + rs.getString("end_time"));
//                v.add(rs.getString("addmision"));
                ResultSet rs1 = search("SELECT COUNT(student_class.id) AS count FROM student_class INNER JOIN class WHERE student_class.class_id = class.id && class.id = '" + rs.getString("class.id") + "'");

                if (rs1.next()) {
                    v.add(rs1.getString("count"));
                }

                ResultSet rs2 = search("SELECT COUNT(class_attendance.id) AS count FROM class_attendance INNER JOIN student_class WHERE class_attendance.student_class_id = student_class.id  && class_attendance.date = CURRENT_DATE() && student_class.class_id = '" + rs.getString("class.id") + "'");

                if (rs2.next()) {
                    v.add(rs2.getString("count"));
                }

                dtm.addRow(v);

                jLabel18.setText(String.valueOf(i));
                i++;
            }

        } catch (Exception e) {
            System.out.println(e);
            warning(e);
        }

//        load today seminars
        try {
            ResultSet rs = search("SELECT * FROM seminar INNER JOIN teacher INNER JOIN subject INNER JOIN grade WHERE seminar.subject_id = subject.id && seminar.teacher_id = teacher.id && subject.grade_id = grade.id && seminar.`status` = '1' && seminar.date = DATE(NOW())");

            while (rs.next()) {
                Vector<String> v = new Vector<>();

                v.add(rs.getString("seminar.id"));
                v.add(rs.getString("subject"));
                v.add(rs.getString("grade"));
                v.add(rs.getString("desc"));
                v.add(rs.getString("name"));

                v.add(rs.getString("start_time") + "-" + rs.getString("end_time"));

                v.add(null);
                
                ResultSet rs2 = search("SELECT COUNT(seminar_attendance.id) AS count FROM seminar_attendance WHERE seminar_attendance.seminar_id  = '" + rs.getString("seminar.id") + "'");

                if (rs2.next()) {
                    v.add(rs2.getString("count"));
                }

                dtm.addRow(v);

                jLabel18.setText(String.valueOf(i));
                i++;
            }

        } catch (Exception e) {
            System.out.println(e);
            warning(e);
        }

//        load today special classes
        try {

            String query = "SELECT * \n"
                    + "\n"
                    + "FROM\n"
                    + "	special_class\n"
                    + "	INNER JOIN class\n"
                    + "	INNER JOIN teacher\n"
                    + "	INNER JOIN subject \n"
                    + "	INNER JOIN grade \n"
                    + "	\n"
                    + "WHERE \n"
                    + "	special_class.class_id = class.id\n"
                    + "	&& class.teacher_id = teacher.id\n"
                    + "	&& class.subject_id = subject.id\n"
                    + "	&& subject.grade_id = grade.id\n"
                    + "	\n"
                    + "	&& special_class.`status` = '1'\n"
                    + "	&& special_class.`date` = DATE(NOW())";

            ResultSet rs = search(query);

            while (rs.next()) {
                Vector<String> v = new Vector<>();

                v.add(rs.getString("special_class.id"));
                v.add(rs.getString("subject"));
                v.add(rs.getString("grade"));
                v.add(rs.getString("desc"));
                v.add(rs.getString("name"));
                v.add(rs.getString("start_time") + "-" + rs.getString("end_time"));

                ResultSet rs1 = search("SELECT COUNT(student_class.id) AS count FROM student_class INNER JOIN class WHERE student_class.class_id = class.id && class.id = '" + rs.getString("class.id") + "'");

                if (rs1.next()) {
                    v.add(rs1.getString("count"));
                }

                ResultSet rs2 = search("SELECT COUNT(id) AS count FROM special_class_attendance WHERE special_class_attendance.date = CURRENT_DATE() && special_class_attendance.id = '" + rs.getString("special_class.id") + "'");

                if (rs2.next()) {
                    v.add(rs2.getString("count"));
                }

                dtm.addRow(v);

                jLabel18.setText(String.valueOf(i));
                i++;
            }

        } catch (Exception e) {
            System.out.println(e);
            warning(e);
        }

//        load today exams
        try {

            String query2 = "SELECT * \n"
                    + "\n"
                    + "FROM\n"
                    + "	exam\n"
                    + "	INNER JOIN subject\n"
                    + "	INNER JOIN grade \n"
                    + "	\n"
                    + "WHERE \n"
                    + "	exam.subject_id = subject.id\n"
                    + "	&& subject.grade_id = grade.id\n"
                    + "	\n"
                    + "	&& exam.`status` = 1\n"
                    + "	&& exam.date = DATE(NOW())\n"
                    + "	";

            ResultSet rs = search(query2);

            while (rs.next()) {
                Vector<String> v = new Vector<>();

                v.add(rs.getString("exam.id"));
                v.add(rs.getString("subject"));
                v.add(rs.getString("grade"));
                v.add(rs.getString("desc"));
                v.add(null);
//                v.add(rs.getString("day"));
                v.add(rs.getString("start") + "-" + rs.getString("end"));
//                v.add(rs.getString("addmision"));

                v.add(null);

                ResultSet rs1 = search("SELECT COUNT(id) AS count FROM exam_attendance WHERE exam_attendance.date = CURRENT_DATE() && exam_attendance.exam_id = '" + rs.getString("exam.id") + "'");

                if (rs1.next()) {
                    v.add(rs1.getString("count"));
                }

                dtm.addRow(v);

                jLabel18.setText(String.valueOf(i));
                i++;
            }

        } catch (Exception e) {
            System.out.println(e);
            warning(e);
        }

    }

    void themeLoad(String theme) {

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/images/basic/" + theme + "/add_32px.png")));
        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/images/basic/" + theme + "/print_32px.png")));

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
