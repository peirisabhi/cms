/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import static DB.Db.search;
import static Logger.Log.warning;
import java.awt.Color;
import java.awt.Font;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.plaf.basic.BasicInternalFrameTitlePane;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRTableModelDataSource;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author abhi
 */
public class Payments extends javax.swing.JInternalFrame {

    /**
     * Creates new form DashBoard
     */
    String theme;
    String userId;
    String user;

    HashMap<String, String> institute = new HashMap<String, String>();

    public Payments(String theme, String userId, String user) {
        initComponents();
        this.theme = theme;
        this.user = user;
        this.userId = userId;
        BasicInternalFrameTitlePane titlePane = (BasicInternalFrameTitlePane) ((BasicInternalFrameUI) this.getUI()).getNorthPane();
        this.remove(titlePane);
        this.setLocation(0, -25);

        tableDesign();
        themeLoad(theme);

        SimpleDateFormat sdf = new SimpleDateFormat("YYYY-MM-dd");
        String date = sdf.format(new Date());
        tableLoad(date, date, jComboBox1.getSelectedItem().toString());

        System.out.println(date);

        jDateChooser1.setDate(new Date());
        jDateChooser2.setDate(new Date());

        ResultSet rs = search("SELECT * FROM institute");

        try {
            if (rs.next()) {
                institute.put("name", rs.getString("name"));
                institute.put("address", rs.getString("address"));
                institute.put("phone1", rs.getString("phone1"));
                institute.put("phone2", rs.getString("phone2"));
                institute.put("website", rs.getString("website"));
                institute.put("fax", rs.getString("fax"));
                institute.put("thank_msg", rs.getString("thank_msg"));
                institute.put("addmision", rs.getString("addmision"));
                institute.put("to_institute", rs.getString("to_institute"));
                institute.put("path", rs.getString("path"));
                institute.put("noti_pay", rs.getString("noti_pay"));
                institute.put("print_after_pay", rs.getString("print_after_pay"));
                institute.put("noti_leave", rs.getString("noti_leave"));
                institute.put("logo_invoice", rs.getString("logo_invoice"));
                institute.put("noti_exam_results", rs.getString("noti_exam_results"));
                institute.put("print_2_invoice", rs.getString("print_2_invoice"));
                institute.put("noti_register", rs.getString("noti_register"));
                institute.put("noti_class_cancel", rs.getString("noti_class_cancel"));
                institute.put("noti_user_login", rs.getString("noti_user_login"));
                institute.put("print_barcode", rs.getString("print_barcode"));
            }
        } catch (SQLException ex) {
            warning(ex);
            ex.printStackTrace();
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel19 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setBorder(null);
        setPreferredSize(new java.awt.Dimension(1010, 570));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jTable1.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "PAYMENT ID", "DATE/TIME", "TEACHER", "AMOUNT", "AVILABLE BAL", "ADJUSTED BY"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setOpaque(false);
        jTable1.setShowVerticalLines(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(10);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(10);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(30);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(200);
            jTable1.getColumnModel().getColumn(4).setPreferredWidth(10);
            jTable1.getColumnModel().getColumn(5).setPreferredWidth(10);
            jTable1.getColumnModel().getColumn(6).setPreferredWidth(40);
        }

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/images/basic/conference_32px.png"))); // NOI18N
        jLabel1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/images/basic/classroom_32px.png"))); // NOI18N
        jLabel2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/images/basic/print_32px.png"))); // NOI18N
        jLabel5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel5MouseClicked(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("Payment");

        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel18.setText("0");

        jLabel12.setText("records found  ");

        jComboBox1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All Payments", "Class Payments", "Seminar Payments" }));
        jComboBox1.setOpaque(false);
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel10.setText("Date Range(from-to)");

        jDateChooser2.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                jDateChooser2InputMethodTextChanged(evt);
            }
        });
        jDateChooser2.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jDateChooser2PropertyChange(evt);
            }
        });

        jDateChooser1.addVetoableChangeListener(new java.beans.VetoableChangeListener() {
            public void vetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {
                jDateChooser1VetoableChange(evt);
            }
        });

        jTable2.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "ID", "CLASS/SEMINAR", "STUDENTS", "ST FEE", "TE FEE", "TOTAL"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.setOpaque(false);
        jTable2.setShowVerticalLines(false);
        jScrollPane2.setViewportView(jTable2);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(0).setPreferredWidth(5);
            jTable2.getColumnModel().getColumn(1).setPreferredWidth(5);
            jTable2.getColumnModel().getColumn(2).setPreferredWidth(300);
            jTable2.getColumnModel().getColumn(3).setPreferredWidth(10);
            jTable2.getColumnModel().getColumn(4).setPreferredWidth(10);
            jTable2.getColumnModel().getColumn(5).setPreferredWidth(10);
            jTable2.getColumnModel().getColumn(6).setPreferredWidth(10);
        }

        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel19.setText("0");

        jLabel13.setText("records found  ");

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/images/basic/print_32px.png"))); // NOI18N
        jLabel6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel6MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jDateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addGap(31, 31, 31))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 990, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel13))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel12)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel6)
                        .addGap(31, 31, 31))))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1002, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jComboBox1)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 265, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel18)
                        .addComponent(jLabel12)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(jLabel13))
                .addGap(41, 41, 41))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(52, 52, 52)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(301, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setBounds(0, 0, 1010, 624);
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked

        new AddNewSeminarPayment(theme, userId, user, this).setVisible(true);

    }//GEN-LAST:event_jLabel1MouseClicked

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked

        new AddNewClassPayment(theme, userId, user, this).setVisible(true);

    }//GEN-LAST:event_jLabel2MouseClicked

    private void jDateChooser2InputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jDateChooser2InputMethodTextChanged

    }//GEN-LAST:event_jDateChooser2InputMethodTextChanged

    private void jDateChooser2PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jDateChooser2PropertyChange
        dateChange();
    }//GEN-LAST:event_jDateChooser2PropertyChange

    private void jDateChooser1VetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {//GEN-FIRST:event_jDateChooser1VetoableChange
        dateChange();
    }//GEN-LAST:event_jDateChooser1VetoableChange

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked

        if (evt.getClickCount() == 2) {

            int row = jTable1.getSelectedRow();

            String id = jTable1.getValueAt(row, 1).toString();

            TableModel model = jTable2.getModel();
            DefaultTableModel dtm = (DefaultTableModel) model;
            dtm.setRowCount(0);

            if (id.split("-")[0].equals("SP")) {

                try {
                    ResultSet rs = search("SELECT * FROM seminar_payment_seminars INNER JOIN seminar INNER JOIN student_class_card_type INNER JOIN subject INNER JOIN grade WHERE seminar_payment_seminars.type_id = student_class_card_type.id && seminar_payment_seminars.seminar_id = seminar.id && seminar.subject_id = subject.id && subject.grade_id = grade.id && seminar_payment_seminars.seminar_payment_id = '" + id + "'");
                    int i = 0;
                    while (rs.next()) {
                        i++;
                        Vector<String> v = new Vector<String>();
                        v.add(String.valueOf(i));
                        v.add(rs.getString("seminar_id"));
                        v.add(rs.getString("grade") + " " + rs.getString("subject") + "-" + rs.getString("desc") + " (" + rs.getString("date") + ")");
                        v.add(rs.getString("students") + " (" + rs.getString("type") + ")");
                        v.add(rs.getString("st_fee"));
                        v.add(rs.getString("te_fee"));
                        v.add(rs.getString("total"));

                        dtm.addRow(v);

                    }
                    jLabel19.setText(String.valueOf(i));

                } catch (SQLException ex) {
                    ex.printStackTrace();
                    warning(ex);
                }

            } else {

                try {
                    ResultSet rs = search("SELECT * FROM class_payment_classes INNER JOIN class INNER JOIN student_class_card_type INNER JOIN subject INNER JOIN grade INNER JOIN day WHERE class.day_id = day.id && class_payment_classes.student_class_card_type_id = student_class_card_type.id && class_payment_classes.class_id = class.id && class.subject_id = subject.id && subject.grade_id = grade.id && class_payment_classes.class_payment_id = '" + id + "'");
                    int i = 0;
                    while (rs.next()) {
                        Vector<String> v = new Vector<String>();
                        v.add(String.valueOf(i));
                        v.add(rs.getString("class_id"));
                        v.add(rs.getString("grade") + " " + rs.getString("subject") + "-" + rs.getString("desc") + " (" + rs.getString("day") + ")");
                        v.add(rs.getString("students") + " (" + rs.getString("type") + ")");
                        v.add(rs.getString("st_fee"));
                        v.add(rs.getString("te_fee"));
                        v.add(rs.getString("total"));

                        dtm.addRow(v);

                    }

                } catch (SQLException ex) {
                    ex.printStackTrace();
                    warning(ex);
                }

            }

        }

    }//GEN-LAST:event_jTable1MouseClicked

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        dateChange();
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void jLabel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseClicked

        int row = jTable1.getSelectedRow();

        if (row != -1 && jTable2.getRowCount() != 0) {

            int r1 = JOptionPane.showConfirmDialog(this, "Are you sure do you want to print recipt", "Conform", JOptionPane.INFORMATION_MESSAGE);

            if (r1 == 0) {
                String query = null;
                if (jTable1.getValueAt(row, 1).toString().split("-")[0].equals("SP")) {
                    System.out.println("sp");
                    query = "SELECT * FROM seminar_payment WHERE id = '" + jTable1.getValueAt(row, 1) + "'";
                } else {
                    System.out.println("cp");
                    query = "SELECT * FROM class_payment WHERE id = '" + jTable1.getValueAt(row, 1) + "'";
                }

                ResultSet rs = search(query);

                try {
                    if (rs.next()) {

                        try {
                            String path = "src//reports//oldPayment.jasper";

                            HashMap<String, Object> map = new HashMap<>();
                            map.put("Parameter1", institute.get("name"));
                            map.put("Parameter2", institute.get("address"));
                            map.put("Parameter3", institute.get("phone1"));
                            map.put("Parameter4", institute.get("phone2"));
                            map.put("Parameter5", institute.get("fax"));
                            map.put("Parameter6", "Teacher's Payment Report");
                            map.put("Parameter7", institute.get("website"));
                            map.put("Parameter8", jTable1.getValueAt(row, 1).toString());
                            map.put("Parameter9", jTable1.getValueAt(row, 3).toString());
                            map.put("Parameter10", jTable1.getValueAt(row, 6).toString());
                            map.put("Parameter11", rs.getString("available_balance"));
                            map.put("Parameter12", rs.getString("balance"));
                            map.put("Parameter13", institute.get("thank_msg"));
                            map.put("Parameter14", String.valueOf(Double.parseDouble(rs.getString("available_balance")) + Double.parseDouble(rs.getString("balance"))));
                            map.put("Parameter15", rs.getString("total"));
                            map.put("Parameter16", rs.getString("date").substring(0, 19));

                            TableModel model = jTable2.getModel();

                            JRTableModelDataSource tabelDataSource = new JRTableModelDataSource(model);

                            JasperPrint print = JasperFillManager.fillReport(path, map, tabelDataSource);

                            JasperViewer.viewReport(print, false);

                        } catch (JRException ex) {
                            ex.printStackTrace();
                            warning(ex);
                        }

                    }
                } catch (SQLException ex) {
                    ex.printStackTrace();
                    warning(ex);
                }

            }

        }

    }//GEN-LAST:event_jLabel6MouseClicked

    private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseClicked

        int r1 = JOptionPane.showConfirmDialog(this, "Are you sure do you want to print Report", "Conform", JOptionPane.INFORMATION_MESSAGE);

        if (r1 == 0) {

            try {
                String path = "src//reports//paymentHistory.jasper";

                HashMap<String, Object> map = new HashMap<>();
                map.put("Parameter1", institute.get("name").toUpperCase());
                map.put("Parameter2", institute.get("address"));
                map.put("Parameter3", institute.get("phone1"));
                map.put("Parameter4", institute.get("phone2"));
                map.put("Parameter5", institute.get("fax"));
                map.put("Parameter6", "PAYMENT HISTORY");
                map.put("Parameter7", institute.get("thank_msg"));

                TableModel model = jTable1.getModel();

                JRTableModelDataSource tabelDataSource = new JRTableModelDataSource(model);

                JasperPrint print = JasperFillManager.fillReport(path, map, tabelDataSource);

                JasperViewer.viewReport(print, false);

            } catch (JRException ex) {
                ex.printStackTrace();
                warning(ex);
            }

        }

    }//GEN-LAST:event_jLabel5MouseClicked

    void tableDesign() {
        JTableHeader th = jTable1.getTableHeader();
        JTableHeader th1 = jTable2.getTableHeader();
        Font font = new Font("Century Gothic", Font.PLAIN, 12);
        th.setFont(font);
        th1.setFont(font);
        th.setOpaque(false);
        th1.setOpaque(false);
        Color cb = new Color(45, 52, 54);
        Color cf = new Color(241, 242, 246);
        th.setForeground(cf);
        th1.setForeground(cf);
        th.setBackground(cb);
        th1.setBackground(cb);

    }

    void dateChange() {
        SimpleDateFormat sdf = new SimpleDateFormat("YYYY-MM-dd");
        tableLoad(sdf.format(jDateChooser2.getDate()), sdf.format(jDateChooser1.getDate()), jComboBox1.getSelectedItem().toString());

        TableModel model = jTable2.getModel();
        DefaultTableModel dtm = (DefaultTableModel) model;
        dtm.setRowCount(0);
    }

    void tableLoad(String startDate, String endDate, String payment) {
        System.out.println(startDate);
        System.out.println(endDate);

        TableModel model = jTable1.getModel();
        DefaultTableModel dtm = (DefaultTableModel) model;
        dtm.setRowCount(0);

        if (payment.equals("Class Payments")) {  // load class payments

            String query = "SELECT \n"
                    + "	*\n"
                    + "\n"
                    + "FROM \n"
                    + "	class_payment\n"
                    + "	INNER JOIN staff\n"
                    + "	INNER JOIN teacher \n"
                    + "	\n"
                    + "WHERE\n"
                    + "	class_payment.teacher_id = teacher.id\n"
                    + "	&& class_payment.staff_id = staff.id\n"
                    + "	&& DATE(class_payment.date) >= '" + startDate + "' and DATE(class_payment.date)  <= '" + endDate + "'\n"
                    + "	\n"
                    + "ORDER\n"
                    + " 	BY class_payment.date DESC ";

            try {
                ResultSet rs = search(query);
                int i = 1;
                System.out.println(i);
                while (rs.next()) {
                    System.out.println("inn");
                    Vector<String> v = new Vector<>();

                    v.add(String.valueOf(i));
                    v.add(rs.getString("class_payment.id"));
                    v.add(rs.getString("class_payment.date").substring(0, 19));
                    v.add(rs.getString("teacher.name"));
                    v.add(rs.getString("amount"));
                    v.add(rs.getString("teacher.balance"));
                    v.add(rs.getString("staff.fname"));

                    dtm.addRow(v);

                    jLabel18.setText(String.valueOf(i));
                    i++;
                }

            } catch (Exception e) {
                System.out.println(e);
                warning(e);
            }

        } else if (payment.equals("Seminar Payments")) {  // load seminar payments

            String query = "SELECT \n"
                    + "	* \n"
                    + "	\n"
                    + "FROM\n"
                    + "	seminar_payment\n"
                    + "	INNER JOIN staff\n"
                    + "	INNER JOIN teacher \n"
                    + "	\n"
                    + "WHERE \n"
                    + "	seminar_payment.teacher_id = teacher.id\n"
                    + " && seminar_payment.staff_id = staff.id"
                    + "	&& DATE(seminar_payment.date) >= '" + startDate + "' and DATE(seminar_payment.date)  <= '" + endDate + "'\n"
                    + "	\n"
                    + "ORDER\n"
                    + " BY seminar_payment.date DESC ";

            try {
                ResultSet rs = search(query);
                int i = 1;
                System.out.println(i);
                while (rs.next()) {
                    System.out.println("inn");
                    Vector<String> v = new Vector<>();

                    v.add(String.valueOf(i));
                    v.add(rs.getString("seminar_payment.id"));
                    v.add(rs.getString("seminar_payment.date").substring(0, 19));
                    v.add(rs.getString("teacher.name"));
                    v.add(rs.getString("paid_amount"));
                    v.add(rs.getString("teacher.balance"));
                    v.add(rs.getString("staff.fname"));

                    dtm.addRow(v);

                    jLabel18.setText(String.valueOf(i));
                    i++;
                }

            } catch (Exception e) {
                System.out.println(e);
                warning(e);
            }

        } else { // load all payments

            int i = 1;

            String query = "SELECT \n"
                    + "	*\n"
                    + "\n"
                    + "FROM \n"
                    + "	class_payment\n"
                    + "	INNER JOIN staff\n"
                    + "	INNER JOIN teacher \n"
                    + "	\n"
                    + "WHERE\n"
                    + "	class_payment.teacher_id = teacher.id\n"
                    + "	&& class_payment.staff_id = staff.id\n"
                    + "	&& DATE(class_payment.date) >= '" + startDate + "' and DATE(class_payment.date)  <= '" + endDate + "'\n"
                    + "	\n"
                    + "ORDER\n"
                    + " 	BY class_payment.date DESC ";

            try {
                ResultSet rs = search(query);

                System.out.println(i);
                while (rs.next()) {
                    System.out.println("inn");
                    Vector<String> v = new Vector<>();

                    v.add(String.valueOf(i));
                    v.add(rs.getString("class_payment.id"));
                    v.add(rs.getString("class_payment.date").substring(0, 19));
                    v.add(rs.getString("teacher.name"));
                    v.add(rs.getString("amount"));
                    v.add(rs.getString("teacher.balance"));
                    v.add(rs.getString("staff.fname"));

                    dtm.addRow(v);

                    jLabel18.setText(String.valueOf(i));
                    i++;
                }

            } catch (Exception e) {
                System.out.println(e);
                warning(e);
            }

            String query1 = "SELECT \n"
                    + "	* \n"
                    + "	\n"
                    + "FROM\n"
                    + "	seminar_payment\n"
                    + "	INNER JOIN staff\n"
                    + "	INNER JOIN teacher \n"
                    + "	\n"
                    + "WHERE \n"
                    + "	seminar_payment.teacher_id = teacher.id\n"
                    + " && seminar_payment.staff_id = staff.id"
                    + "	&& DATE(seminar_payment.date) >= '" + startDate + "' and DATE(seminar_payment.date)  <= '" + endDate + "'\n"
                    + "	\n"
                    + "ORDER\n"
                    + " BY seminar_payment.date DESC ";

            try {
                ResultSet rs = search(query1);

                System.out.println(i);
                while (rs.next()) {
                    System.out.println("inn");
                    Vector<String> v = new Vector<>();

                    v.add(String.valueOf(i));
                    v.add(rs.getString("seminar_payment.id"));
                    v.add(rs.getString("seminar_payment.date").substring(0, 19));
                    v.add(rs.getString("teacher.name"));
                    v.add(rs.getString("paid_amount"));
                    v.add(rs.getString("teacher.balance"));
                    v.add(rs.getString("staff.fname"));

                    dtm.addRow(v);

                    jLabel18.setText(String.valueOf(i));
                    i++;
                }

            } catch (Exception e) {
                System.out.println(e);
                warning(e);
            }

        }

    }

    void themeLoad(String theme) {

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/images/basic/" + theme + "/classroom_32px.png")));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/images/basic/" + theme + "/conference_32px.png")));
        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/images/basic/" + theme + "/print_32px.png")));

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JComboBox jComboBox1;
    com.toedter.calendar.JDateChooser jDateChooser1;
    com.toedter.calendar.JDateChooser jDateChooser2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables
}
